else{
data$Holiday[i] = "None"
}
}
}
}
Genre.dataframe$Avg_Gross <- as.integer(Genre.dataframe$Avg_Gross / Genre.dataframe$Number)
Genre.dataframe$Avg_Days <- as.integer(Genre.dataframe$Avg_Days / (Genre.dataframe$Number - Genre.dataframe$Na))
#EDA Start
# imdb 排名
title <- list()
for(year in c(2013:2017)){
url <- paste("https://www.imdb.com/search/title?year=",year,",",year,"&sort=boxoffice_gross_us,esc&page=1&ref_=adv_nxt",sep="")
print(url)
html <- htmlParse(GET(url),encoding = "UTF-8")
title.list <- xpathSApply(html, "//span[@class='rating-rating ']/span[@class = 'value']", xmlValue)
title2.list <- xpathSApply(html, "//p[@class='rating-rating ']/span[@class = 'value']", xmlValue)
title <- rbind(title, as.matrix(title.list))
url <- paste("https://www.imdb.com/search/title?year=",year,",",year,"&sort=boxoffice_gross_us,esc&page=2&ref_=adv_nxt",sep="")
print(url)
html <- htmlParse(GET(url),encoding = "UTF-8")
title.list <- xpathSApply(html, "//span[@class='rating-rating ']/span[@class = 'value']", xmlValue)
title <- rbind(title, as.matrix(title.list))
}
title <- unlist(title)
title <- as.numeric(title)
title[464] <- mean(title)
data$imdb_Rate <- as.numeric(title)
data
##畫圖：平########
# 1. 基本資料
# 分級 長度 票房 上映天數
p1 <- ggplot(data) +
geom_histogram(aes(x = Running.time),fill = "red",color = "black",
na.rm = TRUE) +
xlab("Running Time") + ylab("Count") +  ggtitle("Running time Distribution") +
theme_grey(base_size = 13)
p2 <- ggplot(data) +
geom_histogram(aes(x = Playing_day),fill = "orange",color = "black",
na.rm = TRUE) +
xlab("Playing Day") + ylab("Count") +  ggtitle("Playing Day Distribution") +
theme_grey(base_size = 13)
p3 <- ggplot(data) +
geom_histogram(aes(x = Total_Gross),fill = "pink",color = "black",
na.rm = TRUE) +
xlab("Number of Theaters") + ylab("Count") +  ggtitle("Theaters Number Distribution") +
theme_grey(base_size = 13)
p4 <- ggplot(data) +
geom_bar(aes(x = factor(1), fill = Rating))+
xlab("") + ylab("") + ggtitle("Rating Distribution") +
coord_polar("y", start=0) +
theme_grey(base_size = 13) +
scale_fill_manual(values=c("#00BA38",'#619CFF',"orange","#F8766D"))
#將四張圖合併輸出（可用可不用）
multiplot(p1, p2, p3, p4,cols=2)
# 種類數量分佈表
Genre.dataframe$Type <- factor(Genre.dataframe$Type)
### 可知票房通常較高的種類為 Adventure Animation *Fantasy
### Fantasy 因為 Star Wars 的關係被拉高很多
#########畫圖:陳###########
data$Year <- as.factor(data$Year)
data$Yearly_Ranking <- as.factor(data$Yearly_Ranking)
data$Rating <- as.factor(data$Rating)
data$Running.length <- as.factor(data$Running.length)
data$Ranking <- as.factor(data$Ranking)
data$Gross_level <- as.factor(data$Gross_level)
########draw by UCLA##########
#1.Rating相關
Rating_p1 <- ggplot(data) +
geom_bar(aes(x = factor(1), fill = Rating))+
xlab("") + ylab("") + ggtitle("Rating Distribution") +
coord_polar("y", start=0) +
theme_grey(base_size = 13) +
scale_fill_manual(values=c("#00BA38",'#619CFF',"orange","#F8766D"))
Rating_p1
Rating_p2 <- ggplot(data,aes(x=Rating,y=Total_Gross/1000000,fill = Rating))+geom_boxplot()+xlab("Rating")+ylab("Total Gross (Million)")
Rating_p3 <- ggplot(data,aes(x=Rating,y=Running.time,fill = Rating))+geom_boxplot()+xlab("Rating")+ylab("Running Time")
multiplot(Rating_p2, Rating_p3,cols=2)
#2.Genre相關
ggplot(data,aes(x=Genre))+geom_bar()+xlab("Genre")+ylab("Count")+coord_flip()
ggplot(data,aes(x=Genre,y=Total_Gross/1000000))+geom_boxplot()+xlab("Genre")+ylab("Total Gross (Million)")+coord_flip()
ggplot(data,aes(x=Genre,y=Total_Gross/1000000))+geom_histogram(stat="identity",aes(fill=Rating))+scale_x_discrete()+xlab("Genre")+ylab("Total Gross (Million)")+coord_flip()
ggplot(data = Genre.dataframe) +
geom_col(aes(x = Type, y = Number,fill = Type)) +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5))
Genre.dataframe$Type <- factor(Genre.dataframe$Type)
ggplot(data = Genre.dataframe) +
geom_col(aes(x = Type, y = Avg_Gross,fill = Type)) +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5))
ggplot(data = Genre.dataframe) +
geom_col(aes(x = Type, y = Avg_Days,fill = Type)) +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5))
#3.Studio相關
ggplot(data,aes(x=Studio))+geom_bar()+xlab("Studio")+ylab("Count")+coord_flip()
ggplot(data,aes(x=Studio,y=Total_Gross/1000000))+geom_boxplot()+xlab("Studio")+ylab("Total Gross (Million)")+coord_flip()
ggplot(data,aes(x=Studio,y=Total_Gross/1000000))+geom_histogram(stat="identity",aes(fill=Rating))+xlab("Studio")+ylab("Total Gross (Million)")+coord_flip()
ggplot(data, aes(x = Studio, fill = Ranking )) +
geom_bar() +
labs(x = 'Studio', y = 'Count') +
theme_grey(base_size = 16) +
coord_flip()
# 4 Running Length
Running_p1 <- ggplot(data) +
geom_histogram(aes(x = Running.time),fill = "#F8766D",color = "black",
na.rm = TRUE) +
xlab("Running Time") + ylab("Count") +  ggtitle("Running time Distribution") +
theme_grey(base_size = 15)
Running_p2 <- ggplot(data) +
geom_bar(aes(x = factor(1), fill = Running.length))+
xlab("") + ylab("") + ggtitle("Running_Length Distribution") +
coord_polar("y", start=0) +
theme_grey(base_size = 15) +
scale_fill_manual(values=c("orange",'#619CFF',"#F8766D","#00BA38")) +
theme(legend.position="bottom")
multiplot(Running_p1, Running_p2,cols=2)
ggplot(data, aes(x = Running.length, fill = Ranking )) +
geom_bar(stat = 'count', position = 'fill') +
labs(x = 'Ranking', y = 'Ratio') +
theme_grey(base_size = 16) +
scale_fill_manual(values=c("#FF61CC","#00A9FF",'#7CAE00',"orange","#F8766D"))
data$Gross_level <- factor(data$Gross_level, levels = c("9","6","5","4","3","2","1","0"))
ggplot(data, aes(x = Running.length, fill = Gross_level )) +
geom_bar(stat = 'count', position = 'fill') +
labs(x = 'Ranking', y = 'Ratio') +
theme_grey(base_size = 16)  +
scale_fill_manual(values=c("#CD9600",'#7CAE00',"#00BE67","#00A9FF","#C77CFF","#00BFC4","#FF61CC","#F8766D"))
##5. 月份圖
data$Open_Month <- factor(data$Open_Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
ggplot(data = data) +
geom_bar(aes(x = Open_Month,fill = Open_Month)) + guides(fill=FALSE)
# 聖誕特映 暑假強檔(總票房 平均票房 總上映家數) 表 圖 呈現
filter(data) %>%
group_by(Holiday) %>%
summarise(Month_Percentage = length(Holiday) / 500 )
ggplot(data) +
geom_bar(aes(x = factor(1), fill = Holiday))+
xlab("") + ylab("") +
coord_polar("y", start=0) +
theme_grey(base_size = 13)
filter(Genre.dataframe) %>%
group_by(Type) %>%
summarise(Number = Number,Summer_Percentage = Summer_Vacation / Number )
filter(Genre.dataframe) %>%
group_by(Type) %>%
summarise(Number = Number, Summer_Percentage = Christmas / Number )
filter(Genre.dataframe) %>%
group_by(Type) %>%
summarise(Number = Number, Summer_Percentage = Halloween / Number )
# 暑假的電影會比較適合小朋友看嗎？(動畫比例較高 分級呈現) 結果並沒有
ggplot(data, aes(x = Open_Month, fill = Rating )) +
geom_bar(stat = 'count', position = 'fill') +
labs(x = 'Running.length', y = 'Ratio') +
theme_grey(base_size = 16)
ggplot(data, aes(x = Open_Month, fill =Genre)) +
geom_bar(stat = 'count', position = 'fill') +
labs(x = 'Running.length', y = 'Ratio') +
theme_grey(base_size = 16)
#6.Opening表現相關
ggplot(data,aes(x=Opening_Gross/1000000,y=Total_Gross/1000000))+geom_point()+xlab("Opening Week Gross (Million)")+ylab("Total Gross (Million)")
ggplot(data,aes(x=Number_of_Opening_Theaters,y=Number_of_Theaters))+geom_point()+xlab("Number of Opening Theaters")+ylab("Number of Theaters")
str(data)
# 7.imdb相關
require(scales)
my_trans <- function(from=0)
{
trans <- function(x) x-from
inv <- function(x) x+from
trans_new("myscale", trans, inv,
domain = c(from, 7))
}
ggplot(data) +
geom_bar(aes(x = Open_Month, y = imdb_Rate, fill = Open_Month),position = 'dodge', stat = "summary", fun.y = "mean") +
scale_y_continuous(trans = my_trans( from = 6))
ggplot(data) +
geom_point(aes(x = imdb_Rate, y = Total_Gross, color = Running.length),size = 2)
save(data, file = paste0(mypath, "data0612.rda"))
load(file = paste0(mypath, "data0612.rda"))
# Random Forest
data2 = subset(data,Year != 2017)
data2 = data2[,c(4,5,7,8,11,12,13,14,17,21)]
data$Genre <- factor(data$Genre)
data2$Genre <- factor(data2$Genre,levels = levels(data$Genre))
str(data2)
library(randomForest)
rf_model <- randomForest(Total_Gross ~ Studio  + Opening_Gross + Running.time + Rating + Open_Month  + Genre + imdb_Rate, data = data2)
data4 = subset(data,Year == 2017)
data4 = data4[,c(4,5,7,8,11,12,13,14,17,21)]
data4$Genre <- factor(data4$Genre, levels = levels(data$Genre) )
str(data4)
prediction1 <- predict(rf_model,data4)
data4$Total_Gross <- prediction1
# xgboost
library(xgboost)
data2 = subset(data,Year != 2017)
data2 = data2[,c(4,5,7,8,11,12,13,14,17,21)]
data3 = subset(data,Year == 2017)
data3 = data3[,c(4,5,7,8,11,12,13,14,17,21)]
str(data2)
data2$Studio <- as.numeric(data2$Studio)
data2$Genre <- as.numeric(factor(data2$Genre))
data2$Rating <- as.numeric(data2$Rating)
data2$Open_Month <- as.numeric(data2$Open_Month)
data2$Running.length <- as.numeric(data2$Running.length)
data3$Studio <- as.numeric(data3$Studio)
data3$Genre <- as.numeric(factor(data3$Genre))
data3$Rating <- as.numeric(data3$Rating)
data3$Open_Month <- as.numeric(data3$Open_Month)
data3$Running.length <- as.numeric(data3$Running.length)
str(data3)
dtrain <- xgb.DMatrix(data = as.matrix(data2) , label = data2$Total_Gross)
dtest <- xgb.DMatrix(data = as.matrix(data3) , label = data3$Total_Gross)
xgb.params = list(
#col的抽樣比例，越高表示每棵樹使用的col越多，會增加每棵小樹的複雜度
colsample_bytree = 0.5,
# row的抽樣比例，越高表示每棵樹使用的col越多，會增加每棵小樹的複雜度
subsample = 0.5,
booster = "gbtree",
# 樹的最大深度，越高表示模型可以長得越深，模型複雜度越高
max_depth = 2,
# boosting會增加被分錯的資料權重，而此參數是讓權重不會增加的那麼快，因此越大會讓模型愈保守
eta = 0.03,
# 或用'mae'也可以
eval_metric = "rmse",
objective = "reg:linear",
# 越大，模型會越保守，相對的模型複雜度比較低
gamma = 0)
cv.model = xgb.cv(
params = xgb.params,
data = dtrain,
nfold = 5,     # 5-fold cv
nrounds=200,   # 測試1-100，各個樹總數下的模型
# 如果當nrounds < 30 時，就已經有overfitting情況發生，那表示不用繼續tune下去了，可以提早停止
early_stopping_rounds = 30,
print_every_n = 20 # 每20個單位才顯示一次結果，
)
tmp = cv.model$evaluation_log
plot(x=1:nrow(tmp), y= tmp$train_rmse_mean, col='red', xlab="nround", ylab="rmse", main="Avg.Performance in CV")
points(x=1:nrow(tmp), y= tmp$test_rmse_mean, col='blue')
legend("topright", pch=1, col = c("red", "blue"),
legend = c("Train", "Validation") )
best.nrounds = cv.model$best_iteration
best.nrounds
xgb.model = xgb.train(paras = xgb.params,
data = dtrain,
nrounds = best.nrounds)
xgb_y = predict(xgb.model, dtest)
mean((xgb_y - data3$Total_Gross)^2) # MSE
mean((data4$Total_Gross - data3$Total_Gross)^2) # MSE
data3$Total_Gross <- xgb_y
data3$Previous_Ranking <- as.numeric(data$Yearly_Ranking[401:500])
data3$Ranking <- 101 - rank(data3$Total_Gross)
data4$Previous_Ranking <- as.numeric(data$Yearly_Ranking[401:500])
data4$Ranking <- 101 - rank(data4$Total_Gross)
library(ggplot2)
ggplot(data = data4) +
geom_point(aes(x = Previous_Ranking, y = Ranking), color = "firebrick1", size = 1)
sum((data4$Ranking - data4$Previous_Ranking)^2)
ggplot(data) +
geom_point(aes(x = imdb_Rate, y = Total_Gross),size = 2)
ggplot(data) +
geom_point(aes(x = imdb_Rate, y = Total_Gross, color = 'firebrick3'),size = 2)
ggplot(data) +
geom_point(aes(x = imdb_Rate, y = Total_Gross, color = 'firebrick3'),size = 1)
ggplot(data) +
geom_point(aes(x = imdb_Rate, y = Total_Gross, color = 'firebrick3'),size = 2)
ggplot(data = data3) +
geom_point(aes(x = Previous_Ranking, y = Ranking), color = "firebrick1", size = 1)
sum((data3$Ranking - data3$Previous_Ranking)^2)
View(data3)
# xgboost
data2 = subset(data,Year != 2017)
data2 = data2[,c(4,5,7,8,11,12,13,14,17,21)]
data3 = subset(data,Year == 2017)
data3 = data3[,c(4,5,7,8,11,12,13,14,17,21)]
str(data2)
data2$Studio <- as.numeric(data2$Studio)
data2$Genre <- as.numeric(factor(data2$Genre))
data2$Rating <- as.numeric(data2$Rating)
data2$Open_Month <- as.numeric(data2$Open_Month)
data2$Running.length <- as.numeric(data2$Running.length)
data3$Studio <- as.numeric(data3$Studio)
data3$Genre <- as.numeric(factor(data3$Genre))
data3$Rating <- as.numeric(data3$Rating)
data3$Open_Month <- as.numeric(data3$Open_Month)
data3$Running.length <- as.numeric(data3$Running.length)
str(data3)
dtrain <- xgb.DMatrix(data = as.matrix(data2) , label = data2$Total_Gross)
dtest <- xgb.DMatrix(data = as.matrix(data3) , label = data3$Total_Gross)
xgb.params = list(
#col的抽樣比例，越高表示每棵樹使用的col越多，會增加每棵小樹的複雜度
colsample_bytree = 0.5,
# row的抽樣比例，越高表示每棵樹使用的col越多，會增加每棵小樹的複雜度
subsample = 0.5,
booster = "gbtree",
# 樹的最大深度，越高表示模型可以長得越深，模型複雜度越高
max_depth = 2,
# boosting會增加被分錯的資料權重，而此參數是讓權重不會增加的那麼快，因此越大會讓模型愈保守
eta = 0.03,
# 或用'mae'也可以
eval_metric = "rmse",
objective = "reg:linear",
# 越大，模型會越保守，相對的模型複雜度比較低
gamma = 0)
install.packages("xgboost")
# Random Forest
data2 = subset(data,Year != 2017)
data2 = data2[,c(4,5,7,8,11,12,13,14,17,21)]
data$Genre <- factor(data$Genre)
data2$Genre <- factor(data2$Genre,levels = levels(data$Genre))
str(data2)
library(randomForest)
rf_model <- randomForest(Total_Gross ~ Studio  + Opening_Gross + Running.time + Rating + Open_Month  + Genre + imdb_Rate, data = data2)
data4 = subset(data,Year == 2017)
data4 = data4[,c(4,5,7,8,11,12,13,14,17,21)]
data4$Genre <- factor(data4$Genre, levels = levels(data$Genre) )
str(data4)
prediction1 <- predict(rf_model,data4)
data4$Total_Gross <- prediction1
# xgboost
data2 = subset(data,Year != 2017)
data2 = data2[,c(4,5,7,8,11,12,13,14,17,21)]
data3 = subset(data,Year == 2017)
data3 = data3[,c(4,5,7,8,11,12,13,14,17,21)]
str(data2)
data2$Studio <- as.numeric(data2$Studio)
data2$Genre <- as.numeric(factor(data2$Genre))
data2$Rating <- as.numeric(data2$Rating)
data2$Open_Month <- as.numeric(data2$Open_Month)
data2$Running.length <- as.numeric(data2$Running.length)
data3$Studio <- as.numeric(data3$Studio)
data3$Genre <- as.numeric(factor(data3$Genre))
data3$Rating <- as.numeric(data3$Rating)
data3$Open_Month <- as.numeric(data3$Open_Month)
data3$Running.length <- as.numeric(data3$Running.length)
str(data3)
dtrain <- xgb.DMatrix(data = as.matrix(data2) , label = data2$Total_Gross)
dtest <- xgb.DMatrix(data = as.matrix(data3) , label = data3$Total_Gross)
xgb.params = list(
#col的抽樣比例，越高表示每棵樹使用的col越多，會增加每棵小樹的複雜度
colsample_bytree = 0.5,
# row的抽樣比例，越高表示每棵樹使用的col越多，會增加每棵小樹的複雜度
subsample = 0.5,
booster = "gbtree",
# 樹的最大深度，越高表示模型可以長得越深，模型複雜度越高
max_depth = 2,
# boosting會增加被分錯的資料權重，而此參數是讓權重不會增加的那麼快，因此越大會讓模型愈保守
eta = 0.03,
# 或用'mae'也可以
eval_metric = "rmse",
objective = "reg:linear",
# 越大，模型會越保守，相對的模型複雜度比較低
gamma = 0)
cv.model = xgb.cv(
params = xgb.params,
data = dtrain,
nfold = 5,     # 5-fold cv
nrounds=200,   # 測試1-100，各個樹總數下的模型
# 如果當nrounds < 30 時，就已經有overfitting情況發生，那表示不用繼續tune下去了，可以提早停止
early_stopping_rounds = 30,
print_every_n = 20 # 每20個單位才顯示一次結果，
)
tmp = cv.model$evaluation_log
plot(x=1:nrow(tmp), y= tmp$train_rmse_mean, col='red', xlab="nround", ylab="rmse", main="Avg.Performance in CV")
points(x=1:nrow(tmp), y= tmp$test_rmse_mean, col='blue')
legend("topright", pch=1, col = c("red", "blue"),
legend = c("Train", "Validation") )
best.nrounds = cv.model$best_iteration
best.nrounds
xgb.model = xgb.train(paras = xgb.params,
data = dtrain,
nrounds = best.nrounds)
xgb_y = predict(xgb.model, dtest)
mean((xgb_y - data3$Total_Gross)^2) # MSE
mean((data4$Total_Gross - data3$Total_Gross)^2) # MSE
data3$Total_Gross <- xgb_y
data3$Previous_Ranking <- as.numeric(data$Yearly_Ranking[401:500])
data3$Ranking <- 101 - rank(data3$Total_Gross)
data4$Previous_Ranking <- as.numeric(data$Yearly_Ranking[401:500])
data4$Ranking <- 101 - rank(data4$Total_Gross)
ggplot(data = data3) +
geom_point(aes(x = Previous_Ranking, y = Ranking), color = "firebrick1", size = 1)
sum((data3$Ranking - data3$Previous_Ranking)^2)
ggplot(data = data4) +
geom_point(aes(x = Previous_Ranking, y = Ranking), color = "firebrick1", size = 1)
sum((data4$Ranking - data4$Previous_Ranking)^2)
# xgboost
data2 = subset(data,Year != 2017)
data2 = data2[,c(4,5,7,8,11,12,13,14,17,21)]
data3 = subset(data,Year == 2017)
data3 = data3[,c(4,5,7,8,11,12,13,14,17,21)]
str(data2)
data2$Studio <- as.numeric(data2$Studio)
data2$Genre <- as.numeric(factor(data2$Genre))
data2$Rating <- as.numeric(data2$Rating)
data2$Open_Month <- as.numeric(data2$Open_Month)
data2$Running.length <- as.numeric(data2$Running.length)
data3$Studio <- as.numeric(data3$Studio)
data3$Genre <- as.numeric(factor(data3$Genre))
data3$Rating <- as.numeric(data3$Rating)
data3$Open_Month <- as.numeric(data3$Open_Month)
data3$Running.length <- as.numeric(data3$Running.length)
str(data3)
dtrain <- xgb.DMatrix(data = as.matrix(data2) , label = data2$Total_Gross)
library(xgboost)
# xgboost
data2 = subset(data,Year != 2017)
data2 = data2[,c(4,5,7,8,11,12,13,14,17,21)]
data3 = subset(data,Year == 2017)
data3 = data3[,c(4,5,7,8,11,12,13,14,17,21)]
str(data2)
data2$Studio <- as.numeric(data2$Studio)
data2$Genre <- as.numeric(factor(data2$Genre))
data2$Rating <- as.numeric(data2$Rating)
data2$Open_Month <- as.numeric(data2$Open_Month)
data2$Running.length <- as.numeric(data2$Running.length)
data3$Studio <- as.numeric(data3$Studio)
data3$Genre <- as.numeric(factor(data3$Genre))
data3$Rating <- as.numeric(data3$Rating)
data3$Open_Month <- as.numeric(data3$Open_Month)
data3$Running.length <- as.numeric(data3$Running.length)
str(data3)
dtrain <- xgb.DMatrix(data = as.matrix(data2) , label = data2$Total_Gross)
dtest <- xgb.DMatrix(data = as.matrix(data3) , label = data3$Total_Gross)
xgb.params = list(
#col的抽樣比例，越高表示每棵樹使用的col越多，會增加每棵小樹的複雜度
colsample_bytree = 0.5,
# row的抽樣比例，越高表示每棵樹使用的col越多，會增加每棵小樹的複雜度
subsample = 0.5,
booster = "gbtree",
# 樹的最大深度，越高表示模型可以長得越深，模型複雜度越高
max_depth = 2,
# boosting會增加被分錯的資料權重，而此參數是讓權重不會增加的那麼快，因此越大會讓模型愈保守
eta = 0.03,
# 或用'mae'也可以
eval_metric = "rmse",
objective = "reg:linear",
# 越大，模型會越保守，相對的模型複雜度比較低
gamma = 0)
cv.model = xgb.cv(
params = xgb.params,
data = dtrain,
nfold = 5,     # 5-fold cv
nrounds=200,   # 測試1-100，各個樹總數下的模型
# 如果當nrounds < 30 時，就已經有overfitting情況發生，那表示不用繼續tune下去了，可以提早停止
early_stopping_rounds = 30,
print_every_n = 20 # 每20個單位才顯示一次結果，
)
tmp = cv.model$evaluation_log
plot(x=1:nrow(tmp), y= tmp$train_rmse_mean, col='red', xlab="nround", ylab="rmse", main="Avg.Performance in CV")
points(x=1:nrow(tmp), y= tmp$test_rmse_mean, col='blue')
legend("topright", pch=1, col = c("red", "blue"),
legend = c("Train", "Validation") )
best.nrounds = cv.model$best_iteration
best.nrounds
xgb.model = xgb.train(paras = xgb.params,
data = dtrain,
nrounds = best.nrounds)
xgb_y = predict(xgb.model, dtest)
mean((xgb_y - data3$Total_Gross)^2) # MSE
mean((data4$Total_Gross - data3$Total_Gross)^2) # MSE
data3$Total_Gross <- xgb_y
data3$Previous_Ranking <- as.numeric(data$Yearly_Ranking[401:500])
data3$Ranking <- 101 - rank(data3$Total_Gross)
data4$Previous_Ranking <- as.numeric(data$Yearly_Ranking[401:500])
data4$Ranking <- 101 - rank(data4$Total_Gross)
ggplot(data = data3) +
geom_point(aes(x = Previous_Ranking, y = Ranking), color = "firebrick1", size = 1)
sum((data3$Ranking - data3$Previous_Ranking)^2)
ggplot(data = data4) +
geom_point(aes(x = Previous_Ranking, y = Ranking), color = "firebrick1", size = 1)
sum((data4$Ranking - data4$Previous_Ranking)^2)
subset(data3, Total_Gross >= 150000000)
data6 <- data.frame(data3$Previous_Ranking ,data$Title, data3$Total_Gross)
subset(data6, Total_Gross >= 150000000)
data6 <- data.frame(data3$Previous_Ranking ,data3$Title[401:500], data3$Total_Gross)
data6 <- data.frame()
data6 <- data.frame(data3$Previous_Ranking ,data3$Title[401:500], data3$Total_Gross)
data6 <- data.frame(data3$Previous_Ranking ,data$Title[401:500], data3$Total_Gross)
View(data6)
names(data6) <- c("Previous_Ranking",  "Title", "Total_Gross")
subset(data6, Total_Gross >= 150000000)
subset(data6, Total_Gross >= 150000000)
data6 <- data.frame()
data6 <- data.frame(data3$Ranking ,data$Title[401:500], data3$Total_Gross)
names(data6) <- c("New_Ranking",  "Title", "Total_Gross")
subset(data6, Total_Gross >= 150000000)
data6 <- data.frame()
data6 <- data.frame(data$Title[401:500],data$Total_Gross[401:500],  data3$Total_Gross)
names(data6) <- c("Title","Previous_Gross", "Total_Gross")
subset(data6, Total_Gross >= 150000000)
subset(data6, Previous_Gross >= 150000000)
data6 <- data.frame(data3$Ranking,data$Title[401:500])
names(data6) <- c("Ranking","Title")
subset(data6, Previous_Gross >= 150000000)
subset(data6, Ranking <= 20)
ggplot(data = data3) +
geom_point(aes(x = Previous_Ranking, y = Ranking), color = "firebrick1", size = 2)
sum((data3$Ranking - data3$Previous_Ranking)^2)
ggplot(data = data4) +
geom_point(aes(x = Previous_Ranking, y = Ranking), color = "firebrick1", size = 2)
View(data)
abs(data3$Total_Gross - data$Total_Gross[401:500])
mean(abs(data3$Total_Gross - data$Total_Gross[401:500] ) / data$Total_Gross[401:500])
(abs(data3$Total_Gross - data$Total_Gross[401:500] ) / data$Total_Gross[401:500])
error <- mean(abs(data3$Total_Gross - data$Total_Gross[401:500] ) / data$Total_Gross[401:500])
100(1 - error)
100*(1 - error)
error <- mean(abs(data3$Total_Gross - data$Total_Gross[401:500] ) / data$Total_Gross[401:500])
100*(1 - error)
4,5,7,8,11,12,13,14,17,21
error <- mean(abs(data3$Total_Gross - data$Total_Gross[401:500] ) / data$Total_Gross[401:500])
100*(1 - error)
